// Generated by CoffeeScript 1.8.0
(function() {
  var $, Backbone, async, bootstrap, channelProtocol, env, helpers, init, initCore, initLogger, initMainView, initModels, initViews, initWebsocket, joinChannel, lweb, queryProtocol, settings, updatingCollection, waitDocument, _,
    __slice = [].slice;

  bootstrap = require('bootstrap-browserify');

  Backbone = require('backbone4000');

  helpers = require('helpers');

  async = require('async');

  _ = window._ = require('underscore');

  $ = require('jquery-browserify');

  lweb = require('lweb3/transports/client/websocket');

  queryProtocol = require('lweb3/protocols/query');

  channelProtocol = require('lweb3/protocols/channel');

  updatingCollection = Backbone.Collection.extend4000({
    initialize: function() {
      return this.on('del', (function(_this) {
        return function(model) {
          return _this.remove(model);
        };
      })(this));
    }
  });

  settings = {
    websockethost: window.location.protocol + "//" + window.location.host
  };

  env = {
    settings: settings
  };

  window.env = env;

  waitDocument = function(env, callback) {
    return $(document).ready(function() {
      return callback();
    });
  };

  initLogger = function(env, callback) {
    env.log = function() {
      var data, json, taglist, tags, text;
      text = arguments[0], data = arguments[1], taglist = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      tags = {};
      _.map(taglist, function(tag) {
        return tags[tag] = true;
      });
      if (tags.error) {
        text = text.red;
      }
      if (tags.error && _.keys(data).length) {
        json = " " + JSON.stringify(msg.data);
      } else {
        json = "";
      }
      return console.log("-> " + _.keys(tags).join(', ') + " " + text + json);
    };
    env.wrapInit = function(text, f) {
      return function(callback) {
        console.log('>', text);
        return f(env, function(err, data) {
          console.log('<', text, "DONE");
          return callback(err, data);
        });
      };
    };
    env.log('logger', {}, 'init', 'ok');
    return callback();
  };

  initCore = function(env, callback) {
    env.lweb = new lweb.webSocketClient({
      host: env.settings.websockethost,
      verbose: false
    });
    env.lweb.addProtocol(new queryProtocol.client({
      verbose: true
    }));
    env.lweb.addProtocol(new channelProtocol.client({
      verbose: true
    }));
    return callback();
  };

  initWebsocket = function(env, callback) {
    if (env.lweb.attributes.socketIo.socket.connected) {
      return callback();
    } else {
      return env.lweb.on('connect', callback);
    }
  };

  joinChannel = function(env, callback) {
    var mac;
    mac = Backbone.Model.extend4000({});
    return env.lweb.channel('macs').join(function(msg) {
      if (msg.state) {
        return env.presence.add(new mac({
          mac: msg.mac
        }));
      } else {
        return env.presence.each(function(oldMac) {
          if (oldMac.get('mac') === msg.mac) {
            return env.presence.remove(oldMac);
          }
        });
      }
    });
  };

  initViews = function(env, callback) {
    env.views = require('./clientside/views');
    return env.views.init(env, callback);
  };

  initModels = function(env, callback) {
    env.presence = new updatingCollection();
    return callback();
  };

  initMainView = function(env, callback) {
    var main;
    main = new env.views.main({
      el: $('body'),
      model: env.presence
    });
    main.render();
    console.log('subscribe!');
    return callback();
  };

  init = function(env, callback) {
    return initLogger(env, function() {
      return async.auto({
        documentready: (function(callback) {
          return waitDocument(env, callback);
        }),
        views: env.wrapInit("Initializing Views...", initViews),
        models: env.wrapInit("models...", initModels),
        mainView: ['views', 'models', 'documentready', 'core', env.wrapInit("main view...", initMainView)],
        core: ['documentready', env.wrapInit("Initializing core...", initCore)],
        websocket: ['core', env.wrapInit("Initializing connection...", initWebsocket)],
        channel: ['websocket', 'mainView', 'models', env.wrapInit("Subscribing...", joinChannel)]
      });
    });
  };

  init(env, function(err, data) {
    if (err) {
      env.log('clientside init failed', {}, 'init', 'fail', 'error');
      return;
    }
    return env.log('clientside ready', {}, 'init', 'ok', 'completed');
  });

}).call(this);
